'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.4927
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection

Namespace DNNCorp.ForgeDownloadManager
	
	<System.Data.Linq.Mapping.DatabaseAttribute(Name:="ForgeDownloadManager")>  _
	Partial Public Class ForgeLinksDataContext
		Inherits System.Data.Linq.DataContext
		
		Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub InsertForgeLink(instance As ForgeLink)
    End Sub
    Partial Private Sub UpdateForgeLink(instance As ForgeLink)
    End Sub
    Partial Private Sub DeleteForgeLink(instance As ForgeLink)
    End Sub
    Partial Private Sub InsertForgeLinkTemplate(instance As ForgeLinkTemplate)
    End Sub
    Partial Private Sub UpdateForgeLinkTemplate(instance As ForgeLinkTemplate)
    End Sub
    Partial Private Sub DeleteForgeLinkTemplate(instance As ForgeLinkTemplate)
    End Sub
    Partial Private Sub InsertForgeLinkSetting(instance As ForgeLinkSetting)
    End Sub
    Partial Private Sub UpdateForgeLinkSetting(instance As ForgeLinkSetting)
    End Sub
    Partial Private Sub DeleteForgeLinkSetting(instance As ForgeLinkSetting)
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("SiteSqlServer").ConnectionString, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As String)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As System.Data.IDbConnection)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public ReadOnly Property ForgeLinks() As System.Data.Linq.Table(Of ForgeLink)
			Get
				Return Me.GetTable(Of ForgeLink)
			End Get
		End Property
		
		Public ReadOnly Property ForgeLinkTemplates() As System.Data.Linq.Table(Of ForgeLinkTemplate)
			Get
				Return Me.GetTable(Of ForgeLinkTemplate)
			End Get
		End Property
		
		Public ReadOnly Property ForgeLinkSettings() As System.Data.Linq.Table(Of ForgeLinkSetting)
			Get
				Return Me.GetTable(Of ForgeLinkSetting)
			End Get
		End Property
	End Class
	
	<Table(Name:="dbo.ForgeLink")>  _
	Partial Public Class ForgeLink
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ForgeLinkId As Integer
		
		Private _ModuleId As Integer
		
		Private _Label As String
		
		Private _FileId As Integer
		
		Private _ForgeTemplateId As Integer
		
		Private _Active As Boolean
		
		Private _ForgeLinkTemplate As EntityRef(Of ForgeLinkTemplate)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnForgeLinkIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnForgeLinkIdChanged()
    End Sub
    Partial Private Sub OnModuleIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnModuleIdChanged()
    End Sub
    Partial Private Sub OnLabelChanging(value As String)
    End Sub
    Partial Private Sub OnLabelChanged()
    End Sub
    Partial Private Sub OnFileIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnFileIdChanged()
    End Sub
    Partial Private Sub OnForgeTemplateIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnForgeTemplateIdChanged()
    End Sub
    Partial Private Sub OnActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActiveChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._ForgeLinkTemplate = CType(Nothing, EntityRef(Of ForgeLinkTemplate))
			OnCreated
		End Sub
		
		<Column(Storage:="_ForgeLinkId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property ForgeLinkId() As Integer
			Get
				Return Me._ForgeLinkId
			End Get
			Set
				If ((Me._ForgeLinkId = value)  _
							= false) Then
					Me.OnForgeLinkIdChanging(value)
					Me.SendPropertyChanging
					Me._ForgeLinkId = value
					Me.SendPropertyChanged("ForgeLinkId")
					Me.OnForgeLinkIdChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_ModuleId", DbType:="Int NOT NULL")>  _
		Public Property ModuleId() As Integer
			Get
				Return Me._ModuleId
			End Get
			Set
				If ((Me._ModuleId = value)  _
							= false) Then
					Me.OnModuleIdChanging(value)
					Me.SendPropertyChanging
					Me._ModuleId = value
					Me.SendPropertyChanged("ModuleId")
					Me.OnModuleIdChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_Label", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property Label() As String
			Get
				Return Me._Label
			End Get
			Set
				If (String.Equals(Me._Label, value) = false) Then
					Me.OnLabelChanging(value)
					Me.SendPropertyChanging
					Me._Label = value
					Me.SendPropertyChanged("Label")
					Me.OnLabelChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_FileId", DbType:="Int NOT NULL")>  _
		Public Property FileId() As Integer
			Get
				Return Me._FileId
			End Get
			Set
				If ((Me._FileId = value)  _
							= false) Then
					Me.OnFileIdChanging(value)
					Me.SendPropertyChanging
					Me._FileId = value
					Me.SendPropertyChanged("FileId")
					Me.OnFileIdChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_ForgeTemplateId", DbType:="Int NOT NULL")>  _
		Public Property ForgeTemplateId() As Integer
			Get
				Return Me._ForgeTemplateId
			End Get
			Set
				If ((Me._ForgeTemplateId = value)  _
							= false) Then
					If Me._ForgeLinkTemplate.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
					End If
					Me.OnForgeTemplateIdChanging(value)
					Me.SendPropertyChanging
					Me._ForgeTemplateId = value
					Me.SendPropertyChanged("ForgeTemplateId")
					Me.OnForgeTemplateIdChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_Active", DbType:="Bit NOT NULL")>  _
		Public Property Active() As Boolean
			Get
				Return Me._Active
			End Get
			Set
				If ((Me._Active = value)  _
							= false) Then
					Me.OnActiveChanging(value)
					Me.SendPropertyChanging
					Me._Active = value
					Me.SendPropertyChanged("Active")
					Me.OnActiveChanged
				End If
			End Set
		End Property
		
		<Association(Name:="ForgeLinkTemplate_ForgeLink", Storage:="_ForgeLinkTemplate", ThisKey:="ForgeTemplateId", OtherKey:="ForgeTemplateId", IsForeignKey:=true)>  _
		Public Property ForgeLinkTemplate() As ForgeLinkTemplate
			Get
				Return Me._ForgeLinkTemplate.Entity
			End Get
			Set
				Dim previousValue As ForgeLinkTemplate = Me._ForgeLinkTemplate.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._ForgeLinkTemplate.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._ForgeLinkTemplate.Entity = Nothing
						previousValue.ForgeLinks.Remove(Me)
					End If
					Me._ForgeLinkTemplate.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.ForgeLinks.Add(Me)
						Me._ForgeTemplateId = value.ForgeTemplateId
					Else
						Me._ForgeTemplateId = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("ForgeLinkTemplate")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Table(Name:="dbo.ForgeLinkTemplate")>  _
	Partial Public Class ForgeLinkTemplate
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ForgeTemplateId As Integer
		
		Private _ModuleId As Integer
		
		Private _Name As String
		
		Private _Template As String
		
		Private _ForgeLinks As EntitySet(Of ForgeLink)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnForgeTemplateIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnForgeTemplateIdChanged()
    End Sub
    Partial Private Sub OnModuleIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnModuleIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnTemplateChanging(value As String)
    End Sub
    Partial Private Sub OnTemplateChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._ForgeLinks = New EntitySet(Of ForgeLink)(AddressOf Me.attach_ForgeLinks, AddressOf Me.detach_ForgeLinks)
			OnCreated
		End Sub
		
		<Column(Storage:="_ForgeTemplateId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property ForgeTemplateId() As Integer
			Get
				Return Me._ForgeTemplateId
			End Get
			Set
				If ((Me._ForgeTemplateId = value)  _
							= false) Then
					Me.OnForgeTemplateIdChanging(value)
					Me.SendPropertyChanging
					Me._ForgeTemplateId = value
					Me.SendPropertyChanged("ForgeTemplateId")
					Me.OnForgeTemplateIdChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_ModuleId", DbType:="Int NOT NULL")>  _
		Public Property ModuleId() As Integer
			Get
				Return Me._ModuleId
			End Get
			Set
				If ((Me._ModuleId = value)  _
							= false) Then
					Me.OnModuleIdChanging(value)
					Me.SendPropertyChanging
					Me._ModuleId = value
					Me.SendPropertyChanged("ModuleId")
					Me.OnModuleIdChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_Name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property Name() As String
			Get
				Return Me._Name
			End Get
			Set
				If (String.Equals(Me._Name, value) = false) Then
					Me.OnNameChanging(value)
					Me.SendPropertyChanging
					Me._Name = value
					Me.SendPropertyChanged("Name")
					Me.OnNameChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_Template", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false)>  _
		Public Property Template() As String
			Get
				Return Me._Template
			End Get
			Set
				If (String.Equals(Me._Template, value) = false) Then
					Me.OnTemplateChanging(value)
					Me.SendPropertyChanging
					Me._Template = value
					Me.SendPropertyChanged("Template")
					Me.OnTemplateChanged
				End If
			End Set
		End Property
		
		<Association(Name:="ForgeLinkTemplate_ForgeLink", Storage:="_ForgeLinks", ThisKey:="ForgeTemplateId", OtherKey:="ForgeTemplateId")>  _
		Public Property ForgeLinks() As EntitySet(Of ForgeLink)
			Get
				Return Me._ForgeLinks
			End Get
			Set
				Me._ForgeLinks.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_ForgeLinks(ByVal entity As ForgeLink)
			Me.SendPropertyChanging
			entity.ForgeLinkTemplate = Me
		End Sub
		
		Private Sub detach_ForgeLinks(ByVal entity As ForgeLink)
			Me.SendPropertyChanging
			entity.ForgeLinkTemplate = Nothing
		End Sub
	End Class
	
	<Table(Name:="dbo.ForgeLinkSettings")>  _
	Partial Public Class ForgeLinkSetting
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ForgeSettingsId As Integer
		
		Private _ModuleId As Integer
		
		Private _ProjectName As String
		
		Private _ReleaseId As Integer
		
		Private _Template As String
		
		Private _AltTemplate As String
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnForgeSettingsIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnForgeSettingsIdChanged()
    End Sub
    Partial Private Sub OnModuleIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnModuleIdChanged()
    End Sub
    Partial Private Sub OnProjectNameChanging(value As String)
    End Sub
    Partial Private Sub OnProjectNameChanged()
    End Sub
    Partial Private Sub OnReleaseIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnReleaseIdChanged()
    End Sub
    Partial Private Sub OnTemplateChanging(value As String)
    End Sub
    Partial Private Sub OnTemplateChanged()
    End Sub
    Partial Private Sub OnAltTemplateChanging(value As String)
    End Sub
    Partial Private Sub OnAltTemplateChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Column(Storage:="_ForgeSettingsId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property ForgeSettingsId() As Integer
			Get
				Return Me._ForgeSettingsId
			End Get
			Set
				If ((Me._ForgeSettingsId = value)  _
							= false) Then
					Me.OnForgeSettingsIdChanging(value)
					Me.SendPropertyChanging
					Me._ForgeSettingsId = value
					Me.SendPropertyChanged("ForgeSettingsId")
					Me.OnForgeSettingsIdChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_ModuleId", DbType:="Int NOT NULL")>  _
		Public Property ModuleId() As Integer
			Get
				Return Me._ModuleId
			End Get
			Set
				If ((Me._ModuleId = value)  _
							= false) Then
					Me.OnModuleIdChanging(value)
					Me.SendPropertyChanging
					Me._ModuleId = value
					Me.SendPropertyChanged("ModuleId")
					Me.OnModuleIdChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_ProjectName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property ProjectName() As String
			Get
				Return Me._ProjectName
			End Get
			Set
				If (String.Equals(Me._ProjectName, value) = false) Then
					Me.OnProjectNameChanging(value)
					Me.SendPropertyChanging
					Me._ProjectName = value
					Me.SendPropertyChanged("ProjectName")
					Me.OnProjectNameChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_ReleaseId", DbType:="Int NOT NULL")>  _
		Public Property ReleaseId() As Integer
			Get
				Return Me._ReleaseId
			End Get
			Set
				If ((Me._ReleaseId = value)  _
							= false) Then
					Me.OnReleaseIdChanging(value)
					Me.SendPropertyChanging
					Me._ReleaseId = value
					Me.SendPropertyChanged("ReleaseId")
					Me.OnReleaseIdChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_Template", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
		Public Property Template() As String
			Get
				Return Me._Template
			End Get
			Set
				If (String.Equals(Me._Template, value) = false) Then
					Me.OnTemplateChanging(value)
					Me.SendPropertyChanging
					Me._Template = value
					Me.SendPropertyChanged("Template")
					Me.OnTemplateChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_AltTemplate", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
		Public Property AltTemplate() As String
			Get
				Return Me._AltTemplate
			End Get
			Set
				If (String.Equals(Me._AltTemplate, value) = false) Then
					Me.OnAltTemplateChanging(value)
					Me.SendPropertyChanging
					Me._AltTemplate = value
					Me.SendPropertyChanged("AltTemplate")
					Me.OnAltTemplateChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
End Namespace
